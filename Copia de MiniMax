{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1qfRVo6yV7n82YPJwyu1pcWqd7wzbXWeb","timestamp":1681481137001}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Inteligencia Artificial\n","Universidad del Cauca\n","Facultad de Ingeniería Electrónica y Telecomunicaciones\n","\n","\n","Russell S., Norvig P., Inteligencia Artificial: Un Enfoque Moderno, ‎ALHAMBRA, 2nd edición (1 Septiembre 2004),\\\\978-8420540030"],"metadata":{"id":"bPk-yQ5156eP"}},{"cell_type":"code","source":["import copy\n","import itertools\n","import random\n","from collections import namedtuple\n","import numpy as np"],"metadata":{"id":"HoXNtc01p-yb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class GameState():\n","  def __init__(self, board, utility=None, nivel=0):\n","    self.__board=board\n","    self.__utility=utility\n","    self.__nivel=nivel\n","\n","  @property\n","  def board(self):\n","    return self.__board\n","\n","  @board.setter\n","  def board(self, value):\n","    self.__board = value\n","  \n","  @property\n","  def utility(self):\n","    return self.__utility\n","\n","  @utility.setter\n","  def utility(self, value):\n","    self.__utility = value\n","  \n","  @property\n","  def nivel(self):\n","    return self.__nivel\n","\n","  @nivel.setter\n","  def nivel(self, value):\n","    self.__nivel = value"],"metadata":{"id":"Bn562howA0By"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Game(object):\n","    # Identificar cuales son los movimientos o jugadas posibles de un jugador\n","    def actions(self, state):\n","        raise NotImplementedError\n","\n","    # Ejecutar un movimiento o jugada y retornar el nuevo estado\n","    def result(self, state, move):\n","        raise NotImplementedError\n","\n","    # Calcular la función de utilidad\n","    def utility(self, state):\n","        raise NotImplementedError\n","\n","    # Condición de parada (profundidad, ganador )\n","    def terminal_test(self, state):\n","        return not self.actions(state)\n","        \n","    # Ejecutar el juego\n","    def play_game(self, *players):\n","       raise NotImplementedError\n"],"metadata":{"id":"flfIuX9EpVkH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["list=['arriba','abajo','izquierda','derecha']\n","a=max(list, key=lambda a:len(a))\n","print(a)"],"metadata":{"id":"El8p3WwTmcNH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1681486622585,"user_tz":300,"elapsed":21,"user":{"displayName":"ARLEX FABIAN GALINDEZ RIVERA","userId":"07539792810102976383"}},"outputId":"1a5f3ba5-05ef-4493-c4ab-2c11b0a54eb7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["izquierda\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3g_gxcoSpOqc"},"outputs":[],"source":["def minimax(state, game):\n","  \n","    def max_value(state):\n","      board=state.board\n","      if game.terminal_test(state):\n","        return game.utility(state)\n","      v = -np.inf\n","      for a in game.actions(state,1):\n","        v = max(v, min_value(game.result(state, a,1)))\n","      return v\n","\n","    def min_value(state):\n","      board=state.board\n","      if game.terminal_test(state):\n","        return game.utility(state)\n","      v = np.inf\n","      for a in game.actions(state,2):\n","        v = min(v, max_value(game.result(state, a,2)))\n","      return v\n","\n","    # Body of minmax_decision:\n","    return max(game.actions(state,1), key=lambda a: min_value(game.result(state, a,1)))"]},{"cell_type":"code","source":["def ConstBoard(board):\n","  print(\"\\nEstado actual del tablero : \\n\")\n","  for i in range(0, 9):\n","    if (i > 0) and (i % 3) == 0:\n","      print(\"\\n\")\n","    if board[i] == -1:\n","      print(\"- \", end=\" \")\n","    if board[i] == 1:\n","      print(\"O \", end=\" \")\n","    if board[i] == 2:\n","      print(\"X \", end=\" \")\n","  print(\"\\n\")\n","\n","def movMachine(board, comp):\n","  board[comp] = 1\n","\n","def movUser1(board):\n","  pos = input(\"Ingrese la posición para X entre [1...9]: \")\n","  pos = int(pos)\n","  if board[pos - 1] != -1 or (1 > pos > 9):\n","    print(\"Movimiento inválido!!!\")\n","    exit(0)\n","  board[pos - 1] = 2\n","\n","def checkWin(table, player):\n","  tictactoe = TicTacToe()\n","  state = GameState(table)\n","  if tictactoe.checkTicTacToe(state):\n","    ConstBoard(table)\n","    print(\"¡Jugador \" + player + \" gana!...\")\n","    exit(0)"],"metadata":{"id":"_PaxFjmrsY86"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import copy\n","import random as rnd\n","class TicTacToe():\n","  def __init__(self):\n","    self.table = [-1]*9\n","    self.nivel = 4\n","  \n","  def actions(self, state, player):\n","    board=state.board\n","    actions=[]\n","    for i, value in enumerate(board):\n","      if value==-1:\n","        actions.append(i)\n","    return actions\n","\n","  def result(self, state, action, player):    \n","    board=state.board\n","    newboard=copy.deepcopy(board)\n","    newboard[action]=player\n","    n=state.nivel+1\n","    newstate=GameState(newboard, nivel=n)\n","    return newstate\n","  \n","  def utility(self, state):\n","    board=state.board\n","    cb = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]\n","    contX = 0  # jugador\n","    contO = 0  # máquina\n","    for i in range(0, 8):\n","      cbAux = [board[cb[i][0]], board[cb[i][1]], board[cb[i][2]]]\n","      if 1 in cbAux and 2 not in cbAux:\n","        contO = contO + 1  # maquina\n","      if 2 in cbAux and 1 not in cbAux:\n","        contX = contX + 1  # jugador\n","      if cbAux.count(-1) == 3:\n","        contO = contO + 1  # maquina\n","        contX = contX + 1  # jugador\n","    return contO - contX \n","\n","\n","\n","  def terminal_test(self, state):\n","    if state.nivel==self.nivel or self.checkTicTacToe(state):\n","      return True\n","    else:\n","      return False\n","  \n","  def checkTicTacToe(self, state):\n","    board=state.board\n","    if self.checkTicTacToeRow(board):\n","      return True\n","    elif self.checkTicTacToeCol(board):\n","      return True\n","    elif self.checkTicTacToeDiag(board):\n","      return True\n","    else:\n","      return False\n","\n","\n","  def checkTicTacToeRow(self,board):\n","    for i in range(0,len(board),3):\n","      ctr=set(board[i:i+3])\n","      if len(ctr)==1 and (-1 not in ctr):\n","        return True\n","    return False\n","\n","  def checkTicTacToeCol(self,board):\n","    for i in range(0,3,1):\n","      ctr=set(board[i::3])\n","      if len(ctr)==1 and (-1 not in ctr):\n","        return True\n","    return False\n","  \n","  def checkTicTacToeDiag(self,board):\n","    ctr=set(board[::4])\n","    if len(ctr)==1 and (-1 not in ctr):\n","      return True\n","    ctr=set(board[2:-1:2])\n","    if len(ctr)==1and (-1 not in ctr):\n","      return True\n","    return False\n","\n","  def play_game(self, tictactoe):\n","      print(\"Máquina --> O Vs Jugador --> X\")\n","      player = input(\"Ingrese 1 si desea iniciar primero. 2 si desea iniciar segundo: \")\n","      player = int(player)\n","      for i in range(0, 9):\n","        if (i + player) % 2 == 0:\n","          state = GameState(self.table)\n","          comp = minimax(state, tictactoe)\n","          movMachine(self.table, comp)\n","          checkWin(self.table, \"O\")\n","        else:\n","          ConstBoard(self.table)\n","          movUser1(self.table)\n","          checkWin(self.table, \"X\")\n"],"metadata":{"id":"NVGZa6rDtue0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["table = [-1]*9\n","print(table)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AFP-eX_RM9gn","executionInfo":{"status":"ok","timestamp":1681481235909,"user_tz":300,"elapsed":7,"user":{"displayName":"ARLEX FABIAN GALINDEZ RIVERA","userId":"07539792810102976383"}},"outputId":"41d42f14-9b25-46ca-b89f-6e860dffd1ba"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[-1, -1, -1, -1, -1, -1, -1, -1, -1]\n"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"B7d32g9TzKBU"}},{"cell_type":"code","source":["def main():\n","  tictactoe = TicTacToe()\n","  tictactoe.play_game(tictactoe)\n","\n","if __name__ == \"__main__\":\n","    main()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yG94y8gxy5SM","executionInfo":{"status":"ok","timestamp":1681486762842,"user_tz":300,"elapsed":20023,"user":{"displayName":"ARLEX FABIAN GALINDEZ RIVERA","userId":"07539792810102976383"}},"outputId":"f09da5e1-0fe2-4641-bdab-574c07118dff"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Máquina --> O Vs Jugador --> X\n","Ingrese 1 si desea iniciar primero. 2 si desea iniciar segundo: 1\n","\n","Estado actual del tablero : \n","\n","-  -  -  \n","\n","-  -  -  \n","\n","-  -  -  \n","\n","Ingrese la posición para X entre [1...9]: 5\n","\n","Estado actual del tablero : \n","\n","O  -  -  \n","\n","-  X  -  \n","\n","-  -  -  \n","\n","Ingrese la posición para X entre [1...9]: 3\n","\n","Estado actual del tablero : \n","\n","O  -  X  \n","\n","-  X  -  \n","\n","O  -  -  \n","\n","Ingrese la posición para X entre [1...9]: 4\n","\n","Estado actual del tablero : \n","\n","O  -  X  \n","\n","X  X  O  \n","\n","O  -  -  \n","\n","Ingrese la posición para X entre [1...9]: 8\n","\n","Estado actual del tablero : \n","\n","O  -  X  \n","\n","X  X  O  \n","\n","O  X  O  \n","\n","Ingrese la posición para X entre [1...9]: 2\n","\n","Estado actual del tablero : \n","\n","O  X  X  \n","\n","X  X  O  \n","\n","O  X  O  \n","\n","¡Jugador X gana!...\n"]}]}]}